// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"fmt"

	"github.com/gogf/gf/v2/database/gdb"

	"test/internal/service/internal/dao/internal"
	"test/internal/service/internal/do"
	"test/internal/model/entity"
)

// alertDao is the data access object for table a_alert.
// You can define custom methods on it to extend its functionality as you wish.
type alertDao struct {
	*internal.AlertDao
}

var (
	// Threshold is globally public accessible object for table a_alert operations.
	Alert = alertDao{
		internal.NewAlertDao(),
	}
)

// Fill with you ideas below.

// Init create Table
func (d *alertDao) Init(ctx context.Context) error {

	sql := `
CREATE TABLE if not exists a_alert(
  alert          CHAR(32)   NOT NULL,
  desc           TEXT       NOT NULL,
  threshold      TEXT,
  default_       INT        NOT NULL,
  state          INT        NOT NULL,
  info           TEXT,
  createdAt      timestamp,
  updatedAt      timestamp,
  PRIMARY KEY(alert)
);
	`
	_, err := d.DB().Exec(ctx, sql)

	return err
}

// All get all rows
func (d *alertDao) All(ctx context.Context) ([]*entity.Alert, error) {

	var rows []*entity.Alert
	err := d.Ctx(ctx).Scan(&rows)

	return rows, err
}

// Update 
func (d *alertDao)Update(ctx context.Context, in *entity.Alert) error {

	r, err := d.Ctx(ctx).Where(do.Alert{Alert: in.Alert}).One()
	if err != nil {
		return err
	}
	
	return d.Transaction(ctx, func(ctx context.Context, _ *gdb.TX) error {
		// insert if not exsit
		if r.IsEmpty(){
			_, err := d.Ctx(ctx).Insert(in)
			return err
		}
		
		// update if exsit
		_, err := d.Ctx(ctx).
				Data(in).
				FieldsEx(d.Columns().Alert, d.Columns().CreatedAt).
				Where(do.Alert{Alert: in.Alert}).
				Update()
			return err
	})
}

func (d *alertDao)UpdateThreshold(ctx context.Context, in *do.Alert ) error {

	r, err := d.Ctx(ctx).Where(do.Alert{Alert: in.Alert}).One()
	if err != nil {
		return err
	}

	if r.IsEmpty(){
		return fmt.Errorf("alert '%s' not exist", in.Alert)
	}

	_, err = d.Ctx(ctx).
		Data(do.Alert{Threshold: in.Threshold}).
		Where(do.Alert{Alert: in.Alert}).
		Update()

	return err
}
